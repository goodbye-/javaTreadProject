1.2.1 同步(Synchronous)和异步(Asynchronous)
             同步和异步通常用来形容一次方法的调用。
             同步方法一旦开始，调用者必须等到方法调用返回后。才能继续后续的行为。
             异步方法更像一个消息传递，一旦开始，方法调用就会立即返回，调用者就可以继续后续的操作。异步方法通常会在另外一个线程中真实的执行
    
1.2.2 并发(Concurrency)和并行(Parallelism) 
               并发偏重于多个任务交替执行，而多个任务之间有可能还是串行的。
               并行 是真正意义上的同时执行    
               
1.2.3 临界区表示一种公共资源或者共享数据，可以被多个线程使用。但是每一次，只能有一个线程使用它，一旦临界区资源被占用，
                其他线程要想使用这个资源，就必须等待。            
                
1.2.4 阻塞(Blocking)和非阻塞(Non-Blocking)
        阻塞和非阻塞通常用来形容多线程间的相互影响。比如一个线程占用了临界区资源，那么其他需要这个资源的线程就只能等待，导致线程挂起。
        非阻塞的意思与之相反，他强调没有一个线程可以妨碍其他线程的执行，所有线程都会尝试不断的前向执行。
        
1.2.5  死锁、饥饿、活锁

1.2 并发级别              阻塞，无饥饿，无障碍，无锁，无等待

1.3-1.4 两个定律，出发点不一样

1.5 JMM 多线程的原子性，可见性和有序性
    
1.5.1 原子性
    long,double    32位jvm中不是原子性的  volatile能解决这个 ，但是volatile不能保证复合操作的原子性
    /**
	    这个命题是正确的，但是也不是必须的。
	该命题的存在是 Java 内存模型要求 lock, unlock, read, load, assign, use, write 这个 8 个操作都具有原子性，但是同时又对 64 位的数据类型 (long&double) 给了一个相对宽松的规定，就是允许虚拟机将没有被 volatile 参数修饰的 64 位数据类型的读写划分为两次 32 位的操作来进行，即允许虚拟机将 load, store, read, write 这个 4 个操作实现为非原子的。
	既然如此为何又是非必须的呢？JSR 对于商用的 JVM，强烈建议将这个四个操作实现为原子操作，而且目前各平台下的商用 JVM 几乎都将其实现为了原子操作。因此我们再编写代码的时候没有必要把用到的 long，double 专门修饰为 volatile 变量。
	参考: 《深入理解 Java 虚拟机》
    */

1.5.2 可见性
    某个线程将数据副本存放在cache或者寄存器中，导致其他线程的修改看不到

1.5.3 有序性  指令重排序的锅，在单线程没问题，多线程可能出现问题

1.5.4 哪些指令不能重排：happen-before规则

2 java 并行程序基础
  
  2.2.1.stop方法会直接终止线程，并且会立即释放这个线程所持有的锁，会导致数据的不一致，所以废弃，可以通过设置标志位，在进入锁之前判断是否结束。
  
  2.2.3 线程中断
        严格的讲，线程中断并不会使线程立即退出，而是给线程发送一个通知，告诉目标线程，有人希望你退出啦，至于目标线程借到通知后如何处理，则完全由目标线程自行决定。
        如果终端后，线程立即无条件退出，就会和stop一样的问题。
        与线程中断有关的，有三个方法:
        1.void Tread.interrupt() //中断线程 ; 通知目标线程中断，设置中断标志位，但是并不会真的退出，只是标识了中断；配合第二个方法实现退出
            Tread.sleep() throws InterruptedException--checkedException ,当线程在sleep休眠时，如果被中断，这个异常就会产生
            sleep方法由于中断抛出异常，会清除中断标记
        2.boolean Tread.isInterrupted() //判断是否被中断
        3.static boolean Thread.interrupted() //判断是否被中断，并清除当前中断状态

2.2.4  等待和通知  wait(必须在synchronized语句中执行obj.wait()) and  notify(在等待队列中随机唤醒，不公平)  源自object方法，算是object的锁吧

2.2.5 挂起和继续执行  suspend(虽然挂起了，但是不释放锁，而且状态还是runnable，如果resume以外的发生在它之前，那就永远无法解锁了) and resume  已废弃
            所以可以用wait实现
            
2.2.6 等待线程结束和谦让  join and yield            

2.3 volatile的用法

2.4 线程组

2.5 守护线程  deamon  
			设置一个线程为守护线程必须在线程start方法之前才可以成功(否则会报错)

2.6 线程优先级    内置 1-5-10 三个优先级   注：优先级并不能保证优先，只能是概率大

2.7 线程安全的概念和synchronized
	synchronized：-------重点：synchronized可以保证线程间的可见性和有序性，可以取代volatile的可见性，而有序性对同步方法没影响
		指定加锁对象：对指定对象加锁，再进入同步代码时，要获取对象的锁
		直接作用于实例方法：相当于对当前实例加锁，进入同步代码前要获得当前实例的锁
		直接作用于静态方法：相当于对当前类加锁，进入同步代码前要获得当前类的锁
		
2.8 隐蔽的bug --- 真正可怕的错误是仅仅结果和你的预期不一样，而你有没有收到异常信息，所以无法下手排查

2.8.2 并发下的ArrayList------2个线程向同一个list添加1w条数据，看结果是否是2w

2.8.3 并发下的HashMap   --- 链表变环！  java7可能，java8取消了

2.8.4 错误的加锁
      示例1：没加到同一个对象上
      示例2：对int或者Integer加锁，integer也是不可变的类，如果synchronized(i)，而i有会执行i++这样的变化操作，那么i的对象也是一直在变得
        demo参考  IntegerSyncDemo

3 jdk 并发包

3.1.1 synchronized的功能扩展：重入锁 java.util.concurrent.locks.ReentrantLock--简单案例 ReenterLock，可重复获取多次，也必须释放多次
    lock():获得锁，如果被占用，则等待
    lockInterruptibly():获得所，但优先响应中断
  
        提供中断响应，解决死锁问题---IntLock.java
        锁申请等待限时:tryLock(不加参数会立即返回):---TimeLock.java
        公平锁：按时间先后顺序，不会产生饥饿，synchronized是非公平的，ReentrantLock(boolean fair)可以设置公平性

3.1.2 重入锁的好搭档：condition条件--ReenterLockCondition.java

3.1.3 允许多个线程同时访问：信号量(Semaphore)  指定访问资源的个数

3.1.4 ReadWriteLock 读写锁---解决两个读线程之间的等待问题 ----ReadWriteLockDemo.java

3.1.5 倒计时--countdownlatch----线程直到倒计时结束才开始执行--CountDownLatchDemo.java

3.1.6 循环栅栏---CyclicBarrer(int,runnable)---接收计数(类似于countdown)和结束后执行的线程---响应中断

3.1.7 线程阻塞工具 ---LockSupport ---可以在线程内任何位置阻塞线程--核心方法park()---相应中断

3.2 线程复用：线程池
            3.2.1 --- ThreadPoolExecutor核心构造方法---任务队列
                    shutdowm()并不立即结束，只是发送信号，但是不接收新线程
3.2.8 在线城池中寻找堆栈 ---包装线程runnable，添加参数exception---TraceThreadPoolExecutor.java

3.2.9 分而治之：fork/join框架---fork开辟新线程，join()等待新线程  jdk提供ForkJoinPool线程池
        ForkJoinPool.submit(ForkJoinTask<T> task);
        ForkJoinTask有两个重要子类：RecursiveAction(没有返回值)和RecursiveTask(有返回值)

        demo---CountTask.java

3.3 JDK的并发容器

3.3.1 并发集合  copyonwriteArrayList等没听过的

3.3.2 线程安全的HashMap
    Collections.synchronizedMap(new HashMap)  ---类似于装饰器，对所有的map方法进行mutex对象的同步，性能不好
    ConcurrentHashMap
 
3.3.3 List的线程安全--Vector安全，ArrayList和LinkedList不安全
    Collections.synchronizedList
    
3.3.4 高效读写的队列：ConcurrentLinkedQueue   

3.3.5 高效读取：CopyOnWriteArrayList 

3.3.6 数据共享通道：BlockingQueue---线程通信的一个接口 常见实现：ArrayBlockigQueue(有界队列)，LinkedBlockingQueue(无界队列)
                BQ之所以适合作为数据共享的通道，关键在于blocking(阻塞)，put和take方法会用codition循环等待直到有能操作的元素
    
    
3.3.7 随机数据结构：跳表(SkipList---ConcurrentSkipListMap实现),能够快速的查询，O(logn),有序的

4.锁的优化及注意事项

4.1 有助于提高锁性能的几点建议
4.1.1 减小锁持有时间，只在需要的地方加锁

4.1.2 减小锁粒度 concurrentHashMap  分段锁。put对相应的分段加锁，但是size方法需要对所有的加锁，并逐个相加(一般会先不加锁计数，失败采用这个该方法)

4.1.3 读写分离锁替换独占锁 

4.1.4 锁分离  ---连表两端操作，使用不同的锁

4.1.5 锁粗化----请求、同步、释放 会消耗资源(循环中将锁加在循环外边) 和4.1.1是相悖的

4.2 java虚拟机对锁优化所作的努力

4.2.1 锁偏向---同一线程无需做同步操作  -XX:+UseBiasedLocking 开启偏向锁

4.2.2 轻量级锁

4.2.3 自旋锁 ---线程获取不到锁，暂时不挂起，执行几个空循环等待锁得释放

4.2.4 锁消除---比如在一个方法内部的局部变量使用Stringbuffer，就去掉他的锁

4.3 人手一支笔：ThreadLocal   -----区分Thread ，ThreadLocal ，ThreadLocalMap(在Thread的变量)，弱引用

4.3.3 对性能有何帮助---如果共享对象对于竞争的处理容易引起性能损失，需要考虑一下ThreadLocal

4.4 无锁---锁是悲观的策略，无锁使用的是CAS

4.4.1  CAS---比较交换

4.4.2 无锁的线程安全整数：AtomicInteger--jdk7下自增是通过循环compareAndSet方法直到得到正确值，jdk8通过unsafe类调用native方法
                                                    其他基本数据类型类似

4.4.3  unsafe类---用户无法调用

4.4.4 无锁对象引用：AtomicReference 
        1.原子操作逻辑上的不足：如果另一个线程经过多次修改之后，数据变回期望值，而当前线程无法判断，当业务需求是我们不能改变对象值的时候，这个就有问题了
          -----AtomicRefrenceDemo.java  --不是很明白这个例子,例子太傻逼了。。。
          
4.4.5 带有时间戳的对象引用：AtomicStampedReference ---内部除了维护一个对象值，还维护了时间戳，当对象修改的时候改变时间戳 ---AtomicStampedReferenceDemo.java                                       

4.4.6 数组也能无锁：AtomicIntegerArray，AtomicLongArray,AtomicReferenceArray

4.4.7 让普通变量也享受原子操作：AtomicIntegerFieldUpdater AtomicLongFieldUpdater AtomicReferenceFieldUpdater
                         --------AtomicIntegerFieldUpdaterDemo.java
                                    1.Updater只能修改可见范围内的变量(因为反射)
                                    2.变量必须是volatile类型的
                                    3.不支持static，因为cas操作会通过对象实例中的偏移量进行操作

4.4.8 挑战无锁算法：无锁的Vector实现

5 并行模式与算法

5.1 探讨单例模式


























































